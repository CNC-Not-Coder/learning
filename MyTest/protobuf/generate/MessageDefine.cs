// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageDefine.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace NetMessage {

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class MessageDefine {

    #region Descriptor
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MessageDefine() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChNNZXNzYWdlRGVmaW5lLnByb3RvIqkBCgtQQl9Vc2VySW5mbxIMCgRHdWlk", 
            "GAEgASgDEhAKCE5pY2tOYW1lGAIgASgJEg0KBUxldmVsGAMgASgFEiwKCUVx", 
            "dWlwRGF0YRgEIAMoCzIZLlBCX1VzZXJJbmZvLlBCX0VxdWlwSW5mbxo9CgxQ", 
            "Ql9FcXVpcEluZm8SDAoER3VpZBgBIAEoAxIQCghDb25maWdJZBgCIAEoBRIN", 
            "CgVMZXZlbBgDIAEoBUINqgIKTmV0TWVzc2FnZWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedCodeInfo(null, new pbr::GeneratedCodeInfo[] {
            new pbr::GeneratedCodeInfo(typeof(global::NetMessage.PB_UserInfo), new[]{ "Guid", "NickName", "Level", "EquipData" }, null, null, new pbr::GeneratedCodeInfo[] { new pbr::GeneratedCodeInfo(typeof(global::NetMessage.PB_UserInfo.Types.PB_EquipInfo), new[]{ "Guid", "ConfigId", "Level" }, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PB_UserInfo : pb::IMessage<PB_UserInfo> {
    private static readonly pb::MessageParser<PB_UserInfo> _parser = new pb::MessageParser<PB_UserInfo>(() => new PB_UserInfo());
    public static pb::MessageParser<PB_UserInfo> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetMessage.MessageDefine.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public PB_UserInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PB_UserInfo(PB_UserInfo other) : this() {
      guid_ = other.guid_;
      nickName_ = other.nickName_;
      level_ = other.level_;
      equipData_ = other.equipData_.Clone();
    }

    public PB_UserInfo Clone() {
      return new PB_UserInfo(this);
    }

    public const int GuidFieldNumber = 1;
    private long guid_;
    public long Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    public const int NickNameFieldNumber = 2;
    private string nickName_ = "";
    public string NickName {
      get { return nickName_; }
      set {
        nickName_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int LevelFieldNumber = 3;
    private int level_;
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    public const int EquipDataFieldNumber = 4;
    private static readonly pb::FieldCodec<global::NetMessage.PB_UserInfo.Types.PB_EquipInfo> _repeated_equipData_codec
        = pb::FieldCodec.ForMessage(34, global::NetMessage.PB_UserInfo.Types.PB_EquipInfo.Parser);
    private readonly pbc::RepeatedField<global::NetMessage.PB_UserInfo.Types.PB_EquipInfo> equipData_ = new pbc::RepeatedField<global::NetMessage.PB_UserInfo.Types.PB_EquipInfo>();
    public pbc::RepeatedField<global::NetMessage.PB_UserInfo.Types.PB_EquipInfo> EquipData {
      get { return equipData_; }
    }

    public override bool Equals(object other) {
      return Equals(other as PB_UserInfo);
    }

    public bool Equals(PB_UserInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Guid != other.Guid) return false;
      if (NickName != other.NickName) return false;
      if (Level != other.Level) return false;
      if(!equipData_.Equals(other.equipData_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Guid != 0L) hash ^= Guid.GetHashCode();
      if (NickName.Length != 0) hash ^= NickName.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      hash ^= equipData_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Guid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Guid);
      }
      if (NickName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NickName);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Level);
      }
      equipData_.WriteTo(output, _repeated_equipData_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (Guid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Guid);
      }
      if (NickName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NickName);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      size += equipData_.CalculateSize(_repeated_equipData_codec);
      return size;
    }

    public void MergeFrom(PB_UserInfo other) {
      if (other == null) {
        return;
      }
      if (other.Guid != 0L) {
        Guid = other.Guid;
      }
      if (other.NickName.Length != 0) {
        NickName = other.NickName;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      equipData_.Add(other.equipData_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Guid = input.ReadInt64();
            break;
          }
          case 18: {
            NickName = input.ReadString();
            break;
          }
          case 24: {
            Level = input.ReadInt32();
            break;
          }
          case 34: {
            equipData_.AddEntriesFrom(input, _repeated_equipData_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class PB_EquipInfo : pb::IMessage<PB_EquipInfo> {
        private static readonly pb::MessageParser<PB_EquipInfo> _parser = new pb::MessageParser<PB_EquipInfo>(() => new PB_EquipInfo());
        public static pb::MessageParser<PB_EquipInfo> Parser { get { return _parser; } }

        public static pbr::MessageDescriptor Descriptor {
          get { return global::NetMessage.PB_UserInfo.Descriptor.NestedTypes[0]; }
        }

        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        public PB_EquipInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        public PB_EquipInfo(PB_EquipInfo other) : this() {
          guid_ = other.guid_;
          configId_ = other.configId_;
          level_ = other.level_;
        }

        public PB_EquipInfo Clone() {
          return new PB_EquipInfo(this);
        }

        public const int GuidFieldNumber = 1;
        private long guid_;
        public long Guid {
          get { return guid_; }
          set {
            guid_ = value;
          }
        }

        public const int ConfigIdFieldNumber = 2;
        private int configId_;
        public int ConfigId {
          get { return configId_; }
          set {
            configId_ = value;
          }
        }

        public const int LevelFieldNumber = 3;
        private int level_;
        public int Level {
          get { return level_; }
          set {
            level_ = value;
          }
        }

        public override bool Equals(object other) {
          return Equals(other as PB_EquipInfo);
        }

        public bool Equals(PB_EquipInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Guid != other.Guid) return false;
          if (ConfigId != other.ConfigId) return false;
          if (Level != other.Level) return false;
          return true;
        }

        public override int GetHashCode() {
          int hash = 1;
          if (Guid != 0L) hash ^= Guid.GetHashCode();
          if (ConfigId != 0) hash ^= ConfigId.GetHashCode();
          if (Level != 0) hash ^= Level.GetHashCode();
          return hash;
        }

        public override string ToString() {
          return pb::JsonFormatter.Default.Format(this);
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Guid != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(Guid);
          }
          if (ConfigId != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(ConfigId);
          }
          if (Level != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(Level);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (Guid != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Guid);
          }
          if (ConfigId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigId);
          }
          if (Level != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
          }
          return size;
        }

        public void MergeFrom(PB_EquipInfo other) {
          if (other == null) {
            return;
          }
          if (other.Guid != 0L) {
            Guid = other.Guid;
          }
          if (other.ConfigId != 0) {
            ConfigId = other.ConfigId;
          }
          if (other.Level != 0) {
            Level = other.Level;
          }
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Guid = input.ReadInt64();
                break;
              }
              case 16: {
                ConfigId = input.ReadInt32();
                break;
              }
              case 24: {
                Level = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
